!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Bier	Haleth.cpp	/^		Bier(string name): name(name){$/;"	f	class:Bier	access:public	signature:(string name)
Bier	Haleth.cpp	/^class Bier: Getraenke {$/;"	c	file:	inherits:Getraenke
Bier::Bier	Haleth.cpp	/^		Bier(string name): name(name){$/;"	f	class:Bier	access:public	signature:(string name)
Bier::getName	Haleth.cpp	/^		string getName() const{$/;"	f	class:Bier	access:public	signature:() const
Bier::name	Haleth.cpp	/^		string name;$/;"	m	class:Bier	file:	access:private
Bier::zutaten	Haleth.cpp	/^		vector<string> zutaten;$/;"	m	class:Bier	file:	access:private
Bruch	Hallas.cpp	/^		Bruch(): zaehler(1), nenner(1){}$/;"	f	class:Bruch	access:public	signature:()
Bruch	Hallas.cpp	/^		Bruch(const Bruch<T>& bruch): Bruch(bruch.zaehler, bruch.nenner){}$/;"	f	class:Bruch	access:public	signature:(const Bruch<T>& bruch)
Bruch	Hallas.cpp	/^		Bruch(const T& zaehler, const T& nenner): zaehler(zaehler), nenner(nenner){}$/;"	f	class:Bruch	access:public	signature:(const T& zaehler, const T& nenner)
Bruch	Hallas.cpp	/^		Bruch(const initializer_list<T>& l): Bruch(*(l.begin()),*(l.end()-1)){}$/;"	f	class:Bruch	access:public	signature:(const initializer_list<T>& l)
Bruch	Hallas.cpp	/^		Bruch(const s_Bruch<T>& b): zaehler(b.zaehler), nenner(b.nenner){}$/;"	f	class:Bruch	access:public	signature:(const s_Bruch<T>& b)
Bruch	Hallas.cpp	/^class Bruch {$/;"	c	file:
Bruch::Bruch	Hallas.cpp	/^		Bruch(): zaehler(1), nenner(1){}$/;"	f	class:Bruch	access:public	signature:()
Bruch::Bruch	Hallas.cpp	/^		Bruch(const Bruch<T>& bruch): Bruch(bruch.zaehler, bruch.nenner){}$/;"	f	class:Bruch	access:public	signature:(const Bruch<T>& bruch)
Bruch::Bruch	Hallas.cpp	/^		Bruch(const T& zaehler, const T& nenner): zaehler(zaehler), nenner(nenner){}$/;"	f	class:Bruch	access:public	signature:(const T& zaehler, const T& nenner)
Bruch::Bruch	Hallas.cpp	/^		Bruch(const initializer_list<T>& l): Bruch(*(l.begin()),*(l.end()-1)){}$/;"	f	class:Bruch	access:public	signature:(const initializer_list<T>& l)
Bruch::Bruch	Hallas.cpp	/^		Bruch(const s_Bruch<T>& b): zaehler(b.zaehler), nenner(b.nenner){}$/;"	f	class:Bruch	access:public	signature:(const s_Bruch<T>& b)
Bruch::getGGT	Hallas.cpp	/^		T getGGT(){$/;"	f	class:Bruch	access:public	signature:()
Bruch::getGGT	Hallas.cpp	/^int Bruch<int>::getGGT(){$/;"	f	class:Bruch	signature:()
Bruch::getInverse	Hallas.cpp	/^		static Bruch<T>& getInverse(Bruch<T> b){$/;"	f	class:Bruch	access:public	signature:(Bruch<T> b)
Bruch::getNenner	Hallas.cpp	/^		T getNenner (){ return this->nenner;  }$/;"	f	class:Bruch	access:public	signature:()
Bruch::getZaehler	Hallas.cpp	/^		T getZaehler(){ return this->zaehler; }$/;"	f	class:Bruch	access:public	signature:()
Bruch::ggt	Hallas.cpp	/^			T ggt = this->getGGT();$/;"	l
Bruch::invertiere	Hallas.cpp	/^			out->invertiere();$/;"	p	file:	signature:()
Bruch::invertiere	Hallas.cpp	/^		Bruch<T>& invertiere(){$/;"	f	class:Bruch	access:public	signature:()
Bruch::nenner	Hallas.cpp	/^		T nenner;$/;"	m	class:Bruch	file:	access:private
Bruch::normalisiere	Hallas.cpp	/^		void normalisiere(){$/;"	f	class:Bruch	file:	access:private	signature:()
Bruch::operator *	Hallas.cpp	/^		friend const Bruch<T>& operator*(const Bruch<T>& links, const Bruch<T>& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const Bruch<T>& rechts)
Bruch::operator *	Hallas.cpp	/^		friend const Bruch<T>& operator*(const Bruch<T>& links, const T& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const T& rechts)
Bruch::operator *	Hallas.cpp	/^		friend const Bruch<T>& operator*(const T& links, const Bruch<T>& rechts){ return rechts*links; }$/;"	f	class:Bruch	access:friend	signature:(const T& links, const Bruch<T>& rechts)
Bruch::operator *=	Hallas.cpp	/^		Bruch<T>& operator*=(const Bruch<T>& rechts){$/;"	f	class:Bruch	access:public	signature:(const Bruch<T>& rechts)
Bruch::operator *=	Hallas.cpp	/^		Bruch<T>& operator*=(const T& rechts){$/;"	f	class:Bruch	access:public	signature:(const T& rechts)
Bruch::operator +	Hallas.cpp	/^		friend const Bruch<T>& operator+(const Bruch<T>& links, const Bruch<T>& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const Bruch<T>& rechts)
Bruch::operator +	Hallas.cpp	/^		friend const Bruch<T>& operator+(const Bruch<T>& links, const T& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const T& rechts)
Bruch::operator +	Hallas.cpp	/^		friend const Bruch<T>& operator+(const T& links, const Bruch<T>& rechts){ return rechts+links; }$/;"	f	class:Bruch	access:friend	signature:(const T& links, const Bruch<T>& rechts)
Bruch::operator +=	Hallas.cpp	/^		Bruch<T>& operator+=(const Bruch<T>& rechts){$/;"	f	class:Bruch	access:public	signature:(const Bruch<T>& rechts)
Bruch::operator +=	Hallas.cpp	/^		Bruch<T>& operator+=(const T& rechts){$/;"	f	class:Bruch	access:public	signature:(const T& rechts)
Bruch::operator -	Hallas.cpp	/^		friend const Bruch<T>& operator-(const Bruch<T>& links, const Bruch<T>& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const Bruch<T>& rechts)
Bruch::operator -	Hallas.cpp	/^		friend const Bruch<T>& operator-(const Bruch<T>& links, const T& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const T& rechts)
Bruch::operator -	Hallas.cpp	/^		friend const Bruch<T>& operator-(const T& links, const Bruch<T>& rechts){ return (rechts-links)*=(-1); }$/;"	f	class:Bruch	access:friend	signature:(const T& links, const Bruch<T>& rechts)
Bruch::operator -=	Hallas.cpp	/^		Bruch<T>& operator-=(const Bruch<T>& rechts){$/;"	f	class:Bruch	access:public	signature:(const Bruch<T>& rechts)
Bruch::operator -=	Hallas.cpp	/^		Bruch<T>& operator-=(const T& rechts){$/;"	f	class:Bruch	access:public	signature:(const T& rechts)
Bruch::operator /	Hallas.cpp	/^		friend const Bruch<T>& operator\/(const Bruch<T>& links, const Bruch<T>& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const Bruch<T>& rechts)
Bruch::operator /	Hallas.cpp	/^		friend const Bruch<T>& operator\/(const Bruch<T>& links, const T& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const T& rechts)
Bruch::operator /	Hallas.cpp	/^		friend const Bruch<T>& operator\/(const T& links, const Bruch<T>& rechts){ return Bruch::getInverse(rechts)*=links; }$/;"	f	class:Bruch	access:friend	signature:(const T& links, const Bruch<T>& rechts)
Bruch::operator /=	Hallas.cpp	/^		Bruch<T>& operator\/=(const Bruch<T>& rechts){$/;"	f	class:Bruch	access:public	signature:(const Bruch<T>& rechts)
Bruch::operator /=	Hallas.cpp	/^		Bruch<T>& operator\/=(const T& rechts){$/;"	f	class:Bruch	access:public	signature:(const T& rechts)
Bruch::operator <<	Hallas.cpp	/^		friend ostream& operator<<(ostream& os, const Bruch<T>& b){$/;"	f	class:Bruch	access:friend	signature:(ostream& os, const Bruch<T>& b)
Bruch::out	Hallas.cpp	/^			Bruch* out = new Bruch(b);$/;"	l
Bruch::out	Hallas.cpp	/^			Bruch<T>* out = new Bruch(links);$/;"	l
Bruch::setNenner	Hallas.cpp	/^		void setNenner (T nenner) { this->nenner  = nenner;  }$/;"	f	class:Bruch	access:public	signature:(T nenner)
Bruch::setZaehler	Hallas.cpp	/^		void setZaehler(T zaehler){ this->zaehler = zaehler; }$/;"	f	class:Bruch	access:public	signature:(T zaehler)
Bruch::tmp	Hallas.cpp	/^			T tmp = new T(this->zaehler);$/;"	l
Bruch::tmp	Hallas.cpp	/^			T tmp = this->zaehler;$/;"	l
Bruch::value_type	Hallas.cpp	/^		typedef T value_type;$/;"	t	class:Bruch	file:	access:private
Bruch::zaehler	Hallas.cpp	/^		T zaehler;$/;"	m	class:Bruch	file:	access:private
Bruch::~Bruch	Hallas.cpp	/^		~Bruch(){}$/;"	f	class:Bruch	access:public	signature:()
CC	makefile	/^CC = gcc$/;"	m
CEXAMPLES	makefile	/^CEXAMPLES = $(shell find . -name '*.c' -print -type f)$/;"	m
CFLAGS	makefile	/^CFLAGS = -ansi -pedantic -Wall -Wextra -Wconversion -O3$/;"	m
CTARGETS	makefile	/^CTARGETS = $(CEXAMPLES:.c=.out)$/;"	m
CXX	makefile	/^CXX = g++$/;"	m
CXXEXAMPLES	makefile	/^CXXEXAMPLES = $(shell find . -name '*.cpp' -print -type f)$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS = -ansi -pedantic -Wall -Wextra -Wconversion$/;"	m
CXXTARGETS	makefile	/^CXXTARGETS = $(CXXEXAMPLES:.cpp=.out) $/;"	m
Complex	Herion.cpp	/^		Complex(): x(0), y(0){$/;"	f	class:Complex	access:public	signature:()
Complex	Herion.cpp	/^		Complex(T x, T y): x(x), y(y){$/;"	f	class:Complex	access:public	signature:(T x, T y)
Complex	Herion.cpp	/^		Complex(const Complex<T>& c): x(c.x), y(c.y){$/;"	f	class:Complex	access:public	signature:(const Complex<T>& c)
Complex	Herion.cpp	/^class Complex {$/;"	c	file:
Complex::Complex	Herion.cpp	/^		Complex(): x(0), y(0){$/;"	f	class:Complex	access:public	signature:()
Complex::Complex	Herion.cpp	/^		Complex(T x, T y): x(x), y(y){$/;"	f	class:Complex	access:public	signature:(T x, T y)
Complex::Complex	Herion.cpp	/^		Complex(const Complex<T>& c): x(c.x), y(c.y){$/;"	f	class:Complex	access:public	signature:(const Complex<T>& c)
Complex::konjugiere	Herion.cpp	/^		void konjugiere(){$/;"	f	class:Complex	access:public	signature:()
Complex::operator *	Herion.cpp	/^		friend Complex<T> operator*(const Complex<T>& a, const Complex<T>& b){$/;"	f	class:Complex	access:friend	signature:(const Complex<T>& a, const Complex<T>& b)
Complex::operator *=	Herion.cpp	/^		Complex<T>& operator*=(const Complex<T>& c){$/;"	f	class:Complex	access:public	signature:(const Complex<T>& c)
Complex::operator +	Herion.cpp	/^		friend Complex<T> operator+(const Complex<T>& a, const Complex<T>& b){$/;"	f	class:Complex	access:friend	signature:(const Complex<T>& a, const Complex<T>& b)
Complex::operator +=	Herion.cpp	/^		Complex<T>& operator+=(const Complex<T>& c){$/;"	f	class:Complex	access:public	signature:(const Complex<T>& c)
Complex::operator -	Herion.cpp	/^		friend Complex<T> operator-(const Complex<T>& a, const Complex<T>& b){$/;"	f	class:Complex	access:friend	signature:(const Complex<T>& a, const Complex<T>& b)
Complex::operator -=	Herion.cpp	/^		Complex<T>& operator-=(const Complex<T>& c){$/;"	f	class:Complex	access:public	signature:(const Complex<T>& c)
Complex::operator <<	Herion.cpp	/^		friend ostream& operator<<(ostream& os, const Complex<T>& c){$/;"	f	class:Complex	access:friend	signature:(ostream& os, const Complex<T>& c)
Complex::out	Herion.cpp	/^			Complex<T> out(a);$/;"	p	file:	signature:(a)
Complex::value_type	Herion.cpp	/^		typedef T value_type;$/;"	t	class:Complex	file:	access:private
Complex::x	Herion.cpp	/^		T x;$/;"	m	class:Complex	file:	access:private
Complex::y	Herion.cpp	/^		T y;$/;"	m	class:Complex	file:	access:private
Flasche	Haleth.cpp	/^				Flasche(const T& t): inhalt(t){$/;"	f	class:Sixpack::Flasche	access:public	signature:(const T& t)
Flasche	Haleth.cpp	/^		class Flasche {$/;"	c	class:Sixpack	file:	access:public
Getraenke	Haleth.cpp	/^class Getraenke {$/;"	c	file:
Getraenke::getName	Haleth.cpp	/^			os << b.getName();$/;"	p	file:	signature:()
Getraenke::getName	Haleth.cpp	/^		virtual string getName() const = 0;$/;"	p	class:Getraenke	file:	access:public	signature:() const
Getraenke::operator <<	Haleth.cpp	/^		friend ostream& operator<<(ostream& os, const Getraenke& b){$/;"	f	class:Getraenke	access:friend	signature:(ostream& os, const Getraenke& b)
LDFLAGS	makefile	/^LDFLAGS = -lm$/;"	m
Potenz	Hyarmendacil.cpp	/^class Potenz {$/;"	c	file:
Potenz	Hyarmendacil.cpp	/^class Potenz<b, 0> {$/;"	c	file:
Potenz	Hyarmendacil.cpp	/^class Potenz<b, 1> {$/;"	c	file:
Potenz::v	Hyarmendacil.cpp	/^		enum { v = 1 };$/;"	e	enum:Potenz::__anon3	file:
Potenz::v	Hyarmendacil.cpp	/^		enum { v = Potenz<b, n-1>::v * b };$/;"	e	enum:Potenz::__anon1	file:
Potenz::v	Hyarmendacil.cpp	/^		enum { v = b };$/;"	e	enum:Potenz::__anon2	file:
Potenz::v	Hyarmendacil.cpp	/^	cout << Potenz<1,200>::v;$/;"	m	class:Potenz	file:
Punkt	Hador.cpp	/^		Punkt(T x, T y): x(x), y(y){}$/;"	f	class:Punkt	access:public	signature:(T x, T y)
Punkt	Hador.cpp	/^		Punkt(const Punkt<T>& p): x(p.x), y(p.y){}$/;"	f	class:Punkt	access:public	signature:(const Punkt<T>& p)
Punkt	Hador.cpp	/^		Punkt(struct Punkte<T>& p): x(p.x), y(p.y){}$/;"	f	class:Punkt	access:public	signature:(struct Punkte<T>& p)
Punkt	Hador.cpp	/^class Punkt {$/;"	c	file:
Punkt::Punkt	Hador.cpp	/^		Punkt(T x, T y): x(x), y(y){}$/;"	f	class:Punkt	access:public	signature:(T x, T y)
Punkt::Punkt	Hador.cpp	/^		Punkt(const Punkt<T>& p): x(p.x), y(p.y){}$/;"	f	class:Punkt	access:public	signature:(const Punkt<T>& p)
Punkt::Punkt	Hador.cpp	/^		Punkt(struct Punkte<T>& p): x(p.x), y(p.y){}$/;"	f	class:Punkt	access:public	signature:(struct Punkte<T>& p)
Punkt::getX	Hador.cpp	/^		int getX() const {$/;"	f	class:Punkt	access:public	signature:() const
Punkt::getY	Hador.cpp	/^		int getY() const {$/;"	f	class:Punkt	access:public	signature:() const
Punkt::operator <<	Hador.cpp	/^		friend ostream& operator<<(ostream & os, const Punkt<T>& p){$/;"	f	class:Punkt	access:friend	signature:(ostream & os, const Punkt<T>& p)
Punkt::setX	Hador.cpp	/^		void setX(const T& x){$/;"	f	class:Punkt	access:public	signature:(const T& x)
Punkt::setY	Hador.cpp	/^		void setY(const T& y){$/;"	f	class:Punkt	access:public	signature:(const T& y)
Punkt::value_type	Hador.cpp	/^		typedef T value_type;$/;"	t	class:Punkt	file:	access:private
Punkt::x	Hador.cpp	/^		T x;$/;"	m	class:Punkt	file:	access:private
Punkt::y	Hador.cpp	/^		T y;$/;"	m	class:Punkt	file:	access:private
Punkt::~Punkt	Hador.cpp	/^		~Punkt(){}$/;"	f	class:Punkt	access:public	signature:()
Punkte	Hador.cpp	/^struct Punkte{$/;"	s	file:
Punkte::x	Hador.cpp	/^	T x;$/;"	m	struct:Punkte	file:	access:public
Punkte::y	Hador.cpp	/^	T y;$/;"	m	struct:Punkte	file:	access:public
Sixpack	Haleth.cpp	/^		Sixpack(T& t): inhalt(t){$/;"	f	class:Sixpack	access:public	signature:(T& t)
Sixpack	Haleth.cpp	/^class Sixpack {$/;"	c	file:
Sixpack::Flasche	Haleth.cpp	/^		class Flasche {$/;"	c	class:Sixpack	file:	access:public
Sixpack::Flasche::Flasche	Haleth.cpp	/^				Flasche(const T& t): inhalt(t){$/;"	f	class:Sixpack::Flasche	access:public	signature:(const T& t)
Sixpack::Flasche::getInhalt	Haleth.cpp	/^				T getInhalt(){$/;"	f	class:Sixpack::Flasche	access:public	signature:()
Sixpack::Flasche::getMenge	Haleth.cpp	/^				double getMenge(){$/;"	f	class:Sixpack::Flasche	access:public	signature:()
Sixpack::Flasche::inhalt	Haleth.cpp	/^				T inhalt;		\/\/Bier$/;"	m	class:Sixpack::Flasche	file:	access:private
Sixpack::Flasche::istLeer	Haleth.cpp	/^				bool istLeer(){$/;"	f	class:Sixpack::Flasche	access:public	signature:()
Sixpack::Flasche::menge	Haleth.cpp	/^				double menge;	\/\/30%$/;"	m	class:Sixpack::Flasche	file:	access:private
Sixpack::Flasche::operator +=	Haleth.cpp	/^				Flasche& operator+=(const double menge){$/;"	f	class:Sixpack::Flasche	access:public	signature:(const double menge)
Sixpack::Flasche::operator -=	Haleth.cpp	/^				Flasche& operator-=(const double menge){$/;"	f	class:Sixpack::Flasche	access:public	signature:(const double menge)
Sixpack::Flasche::operator <<	Haleth.cpp	/^				friend ostream& operator<<(ostream& os, const Flasche& f){$/;"	f	class:Sixpack::Flasche	access:friend	signature:(ostream& os, const Flasche& f)
Sixpack::Sixpack	Haleth.cpp	/^		Sixpack(T& t): inhalt(t){$/;"	f	class:Sixpack	access:public	signature:(T& t)
Sixpack::endl	Haleth.cpp	/^						cout << "Diese Flasche ist jetzt auch leer :("<<endl;$/;"	l
Sixpack::endl	Haleth.cpp	/^					cout << "Mist. Die Flasche ist leer" << endl;$/;"	l
Sixpack::f	Haleth.cpp	/^				Flasche* f = &(this->sixpack[flasche-1]);$/;"	l
Sixpack::getMenge	Haleth.cpp	/^					os << ", " <<++i<<":"<< f.getMenge();$/;"	p	file:	signature:()
Sixpack::getMenge	Haleth.cpp	/^					os<<++i<<":"<<f.getMenge();$/;"	p	file:	signature:()
Sixpack::i	Haleth.cpp	/^			int i = 0;$/;"	l
Sixpack::i	Haleth.cpp	/^			int i = 1;$/;"	l
Sixpack::inhalt	Haleth.cpp	/^		T inhalt;$/;"	m	class:Sixpack	file:	access:public
Sixpack::istLeer	Haleth.cpp	/^		bool istLeer(){$/;"	f	class:Sixpack	access:public	signature:()
Sixpack::leer	Haleth.cpp	/^			bool leer = true;$/;"	l
Sixpack::operator <<	Haleth.cpp	/^		friend ostream& operator<<(ostream& os, const Sixpack<T>& s){$/;"	f	class:Sixpack	access:friend	signature:(ostream& os, const Sixpack<T>& s)
Sixpack::operator []	Haleth.cpp	/^		Flasche& operator[](size_t idx){$/;"	f	class:Sixpack	access:public	signature:(size_t idx)
Sixpack::push_back	Haleth.cpp	/^			this->sixpack.push_back(t);$/;"	p	file:	signature:(t)
Sixpack::sixpack	Haleth.cpp	/^		vector<Flasche> sixpack;$/;"	m	class:Sixpack	file:	access:public
Sixpack::tmp	Haleth.cpp	/^						double tmp = f->getMenge();$/;"	l
Sixpack::trink	Haleth.cpp	/^		void trink(int flasche, double menge){$/;"	f	class:Sixpack	access:public	signature:(int flasche, double menge)
Sixpack::trinkNaechsteVolleFlasche	Haleth.cpp	/^		void trinkNaechsteVolleFlasche(double menge){$/;"	f	class:Sixpack	access:public	signature:(double menge)
Sixpack::value_type	Haleth.cpp	/^		typedef T value_type;$/;"	t	class:Sixpack	file:	access:private
b3	Hallas.cpp	/^	Bruch<double> b3(b);$/;"	p	file:	signature:(b)
c	Herion.cpp	/^	Complex<double> c;$/;"	l
endl	Hador.cpp	/^	cout <<d <<endl;$/;"	l
endl	Hador.cpp	/^	cout <<i <<endl;$/;"	l
endl	Haleth.cpp	/^						cout << "Diese Flasche ist jetzt auch leer :("<<endl;$/;"	l
endl	Haleth.cpp	/^					cout << "Mist. Die Flasche ist leer" << endl;$/;"	l
endl	Haleth.cpp	/^		cout << endl;$/;"	l
endl	Haleth.cpp	/^		cout << meinPack <<endl;$/;"	l
endl	Haleth.cpp	/^	cout << meinPack <<endl;$/;"	l
endl	Hallas.cpp	/^	cout << b1 << endl;$/;"	l
endl	Hallas.cpp	/^	cout << b2 << endl;$/;"	l
endl	Hallas.cpp	/^	cout << b3 << endl;$/;"	l
endl	Herion.cpp	/^	cout << "a = " << a << endl;$/;"	l
endl	Herion.cpp	/^	cout << "a*b = " << c << endl;$/;"	l
endl	Herion.cpp	/^	cout << "a+b = " << c << endl;$/;"	l
endl	Herion.cpp	/^	cout << "a-b = " << c << endl;$/;"	l
endl	Herion.cpp	/^	cout << "b = " << b << endl;$/;"	l
f	Haleth.cpp	/^				Flasche* f = &(this->sixpack[flasche-1]);$/;"	l
getGGT	Hallas.cpp	/^		T getGGT(){$/;"	f	class:Bruch	access:public	signature:()
getGGT	Hallas.cpp	/^int Bruch<int>::getGGT(){$/;"	f	class:Bruch	signature:()
getInhalt	Haleth.cpp	/^				T getInhalt(){$/;"	f	class:Sixpack::Flasche	access:public	signature:()
getInverse	Hallas.cpp	/^		static Bruch<T>& getInverse(Bruch<T> b){$/;"	f	class:Bruch	access:public	signature:(Bruch<T> b)
getMenge	Haleth.cpp	/^					os << ", " <<++i<<":"<< f.getMenge();$/;"	p	file:	signature:()
getMenge	Haleth.cpp	/^					os<<++i<<":"<<f.getMenge();$/;"	p	file:	signature:()
getMenge	Haleth.cpp	/^				double getMenge(){$/;"	f	class:Sixpack::Flasche	access:public	signature:()
getName	Haleth.cpp	/^			os << b.getName();$/;"	p	file:	signature:()
getName	Haleth.cpp	/^		string getName() const{$/;"	f	class:Bier	access:public	signature:() const
getName	Haleth.cpp	/^		virtual string getName() const = 0;$/;"	p	class:Getraenke	file:	access:public	signature:() const
getNenner	Hallas.cpp	/^		T getNenner (){ return this->nenner;  }$/;"	f	class:Bruch	access:public	signature:()
getX	Hador.cpp	/^		int getX() const {$/;"	f	class:Punkt	access:public	signature:() const
getY	Hador.cpp	/^		int getY() const {$/;"	f	class:Punkt	access:public	signature:() const
getZaehler	Hallas.cpp	/^		T getZaehler(){ return this->zaehler; }$/;"	f	class:Bruch	access:public	signature:()
ggt	Hallas.cpp	/^			T ggt = this->getGGT();$/;"	l
ggt	Hallas.cpp	/^	int ggt=1;$/;"	l
i	Haleth.cpp	/^			int i = 0;$/;"	l
i	Haleth.cpp	/^			int i = 1;$/;"	l
inhalt	Haleth.cpp	/^				T inhalt;		\/\/Bier$/;"	m	class:Sixpack::Flasche	file:	access:private
inhalt	Haleth.cpp	/^		T inhalt;$/;"	m	class:Sixpack	file:	access:public
invertiere	Hallas.cpp	/^			out->invertiere();$/;"	p	file:	signature:()
invertiere	Hallas.cpp	/^		Bruch<T>& invertiere(){$/;"	f	class:Bruch	access:public	signature:()
istLeer	Haleth.cpp	/^				bool istLeer(){$/;"	f	class:Sixpack::Flasche	access:public	signature:()
istLeer	Haleth.cpp	/^		bool istLeer(){$/;"	f	class:Sixpack	access:public	signature:()
konjugiere	Herion.cpp	/^		void konjugiere(){$/;"	f	class:Complex	access:public	signature:()
leer	Haleth.cpp	/^			bool leer = true;$/;"	l
main	Hador.cpp	/^int main(){$/;"	f	signature:()
main	Haleth.cpp	/^int main(){$/;"	f	signature:()
main	Hallas.cpp	/^int main(){$/;"	f	signature:()
main	Herion.cpp	/^int main(){$/;"	f	signature:()
main	Hyarmendacil.cpp	/^int main(){$/;"	f	signature:()
max	Hallas.cpp	/^	int max;$/;"	l
meinPack	Haleth.cpp	/^	Sixpack<Bier> meinPack(turmbrau);$/;"	p	file:	signature:(turmbrau)
menge	Haleth.cpp	/^				double menge;	\/\/30%$/;"	m	class:Sixpack::Flasche	file:	access:private
menge	Haleth.cpp	/^		cin >> menge;$/;"	l
name	Haleth.cpp	/^		string name;$/;"	m	class:Bier	file:	access:private
nenner	Hallas.cpp	/^		T nenner;$/;"	m	class:Bruch	file:	access:private
nenner	Hallas.cpp	/^	T nenner;$/;"	m	struct:s_Bruch	file:	access:public
nenner	Hallas.cpp	/^	int nenner = this->nenner;$/;"	l
normalisiere	Hallas.cpp	/^		void normalisiere(){$/;"	f	class:Bruch	file:	access:private	signature:()
operator *	Hallas.cpp	/^		friend const Bruch<T>& operator*(const Bruch<T>& links, const Bruch<T>& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const Bruch<T>& rechts)
operator *	Hallas.cpp	/^		friend const Bruch<T>& operator*(const Bruch<T>& links, const T& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const T& rechts)
operator *	Hallas.cpp	/^		friend const Bruch<T>& operator*(const T& links, const Bruch<T>& rechts){ return rechts*links; }$/;"	f	class:Bruch	access:friend	signature:(const T& links, const Bruch<T>& rechts)
operator *	Herion.cpp	/^		friend Complex<T> operator*(const Complex<T>& a, const Complex<T>& b){$/;"	f	class:Complex	access:friend	signature:(const Complex<T>& a, const Complex<T>& b)
operator *=	Hallas.cpp	/^		Bruch<T>& operator*=(const Bruch<T>& rechts){$/;"	f	class:Bruch	access:public	signature:(const Bruch<T>& rechts)
operator *=	Hallas.cpp	/^		Bruch<T>& operator*=(const T& rechts){$/;"	f	class:Bruch	access:public	signature:(const T& rechts)
operator *=	Herion.cpp	/^		Complex<T>& operator*=(const Complex<T>& c){$/;"	f	class:Complex	access:public	signature:(const Complex<T>& c)
operator +	Hallas.cpp	/^		friend const Bruch<T>& operator+(const Bruch<T>& links, const Bruch<T>& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const Bruch<T>& rechts)
operator +	Hallas.cpp	/^		friend const Bruch<T>& operator+(const Bruch<T>& links, const T& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const T& rechts)
operator +	Hallas.cpp	/^		friend const Bruch<T>& operator+(const T& links, const Bruch<T>& rechts){ return rechts+links; }$/;"	f	class:Bruch	access:friend	signature:(const T& links, const Bruch<T>& rechts)
operator +	Herion.cpp	/^		friend Complex<T> operator+(const Complex<T>& a, const Complex<T>& b){$/;"	f	class:Complex	access:friend	signature:(const Complex<T>& a, const Complex<T>& b)
operator +=	Haleth.cpp	/^				Flasche& operator+=(const double menge){$/;"	f	class:Sixpack::Flasche	access:public	signature:(const double menge)
operator +=	Hallas.cpp	/^		Bruch<T>& operator+=(const Bruch<T>& rechts){$/;"	f	class:Bruch	access:public	signature:(const Bruch<T>& rechts)
operator +=	Hallas.cpp	/^		Bruch<T>& operator+=(const T& rechts){$/;"	f	class:Bruch	access:public	signature:(const T& rechts)
operator +=	Herion.cpp	/^		Complex<T>& operator+=(const Complex<T>& c){$/;"	f	class:Complex	access:public	signature:(const Complex<T>& c)
operator -	Hallas.cpp	/^		friend const Bruch<T>& operator-(const Bruch<T>& links, const Bruch<T>& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const Bruch<T>& rechts)
operator -	Hallas.cpp	/^		friend const Bruch<T>& operator-(const Bruch<T>& links, const T& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const T& rechts)
operator -	Hallas.cpp	/^		friend const Bruch<T>& operator-(const T& links, const Bruch<T>& rechts){ return (rechts-links)*=(-1); }$/;"	f	class:Bruch	access:friend	signature:(const T& links, const Bruch<T>& rechts)
operator -	Herion.cpp	/^		friend Complex<T> operator-(const Complex<T>& a, const Complex<T>& b){$/;"	f	class:Complex	access:friend	signature:(const Complex<T>& a, const Complex<T>& b)
operator -=	Haleth.cpp	/^				Flasche& operator-=(const double menge){$/;"	f	class:Sixpack::Flasche	access:public	signature:(const double menge)
operator -=	Hallas.cpp	/^		Bruch<T>& operator-=(const Bruch<T>& rechts){$/;"	f	class:Bruch	access:public	signature:(const Bruch<T>& rechts)
operator -=	Hallas.cpp	/^		Bruch<T>& operator-=(const T& rechts){$/;"	f	class:Bruch	access:public	signature:(const T& rechts)
operator -=	Herion.cpp	/^		Complex<T>& operator-=(const Complex<T>& c){$/;"	f	class:Complex	access:public	signature:(const Complex<T>& c)
operator /	Hallas.cpp	/^		friend const Bruch<T>& operator\/(const Bruch<T>& links, const Bruch<T>& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const Bruch<T>& rechts)
operator /	Hallas.cpp	/^		friend const Bruch<T>& operator\/(const Bruch<T>& links, const T& rechts){$/;"	f	class:Bruch	access:friend	signature:(const Bruch<T>& links, const T& rechts)
operator /	Hallas.cpp	/^		friend const Bruch<T>& operator\/(const T& links, const Bruch<T>& rechts){ return Bruch::getInverse(rechts)*=links; }$/;"	f	class:Bruch	access:friend	signature:(const T& links, const Bruch<T>& rechts)
operator /=	Hallas.cpp	/^		Bruch<T>& operator\/=(const Bruch<T>& rechts){$/;"	f	class:Bruch	access:public	signature:(const Bruch<T>& rechts)
operator /=	Hallas.cpp	/^		Bruch<T>& operator\/=(const T& rechts){$/;"	f	class:Bruch	access:public	signature:(const T& rechts)
operator <<	Hador.cpp	/^		friend ostream& operator<<(ostream & os, const Punkt<T>& p){$/;"	f	class:Punkt	access:friend	signature:(ostream & os, const Punkt<T>& p)
operator <<	Haleth.cpp	/^				friend ostream& operator<<(ostream& os, const Flasche& f){$/;"	f	class:Sixpack::Flasche	access:friend	signature:(ostream& os, const Flasche& f)
operator <<	Haleth.cpp	/^		friend ostream& operator<<(ostream& os, const Getraenke& b){$/;"	f	class:Getraenke	access:friend	signature:(ostream& os, const Getraenke& b)
operator <<	Haleth.cpp	/^		friend ostream& operator<<(ostream& os, const Sixpack<T>& s){$/;"	f	class:Sixpack	access:friend	signature:(ostream& os, const Sixpack<T>& s)
operator <<	Hallas.cpp	/^		friend ostream& operator<<(ostream& os, const Bruch<T>& b){$/;"	f	class:Bruch	access:friend	signature:(ostream& os, const Bruch<T>& b)
operator <<	Herion.cpp	/^		friend ostream& operator<<(ostream& os, const Complex<T>& c){$/;"	f	class:Complex	access:friend	signature:(ostream& os, const Complex<T>& c)
operator []	Haleth.cpp	/^		Flasche& operator[](size_t idx){$/;"	f	class:Sixpack	access:public	signature:(size_t idx)
out	Hallas.cpp	/^			Bruch* out = new Bruch(b);$/;"	l
out	Hallas.cpp	/^			Bruch<T>* out = new Bruch(links);$/;"	l
out	Herion.cpp	/^			Complex<T> out(a);$/;"	p	file:	signature:(a)
push_back	Haleth.cpp	/^			this->sixpack.push_back(t);$/;"	p	file:	signature:(t)
s_Bruch	Hallas.cpp	/^struct s_Bruch {$/;"	s	file:
s_Bruch::nenner	Hallas.cpp	/^	T nenner;$/;"	m	struct:s_Bruch	file:	access:public
s_Bruch::zaehler	Hallas.cpp	/^	T zaehler;$/;"	m	struct:s_Bruch	file:	access:public
setNenner	Hallas.cpp	/^		void setNenner (T nenner) { this->nenner  = nenner;  }$/;"	f	class:Bruch	access:public	signature:(T nenner)
setX	Hador.cpp	/^		void setX(const T& x){$/;"	f	class:Punkt	access:public	signature:(const T& x)
setY	Hador.cpp	/^		void setY(const T& y){$/;"	f	class:Punkt	access:public	signature:(const T& y)
setZaehler	Hallas.cpp	/^		void setZaehler(T zaehler){ this->zaehler = zaehler; }$/;"	f	class:Bruch	access:public	signature:(T zaehler)
sixpack	Haleth.cpp	/^		vector<Flasche> sixpack;$/;"	m	class:Sixpack	file:	access:public
tmp	Haleth.cpp	/^						double tmp = f->getMenge();$/;"	l
tmp	Hallas.cpp	/^			T tmp = new T(this->zaehler);$/;"	l
tmp	Hallas.cpp	/^			T tmp = this->zaehler;$/;"	l
trink	Haleth.cpp	/^		void trink(int flasche, double menge){$/;"	f	class:Sixpack	access:public	signature:(int flasche, double menge)
trinkNaechsteVolleFlasche	Haleth.cpp	/^		meinPack.trinkNaechsteVolleFlasche(menge);$/;"	p	file:	signature:(menge)
trinkNaechsteVolleFlasche	Haleth.cpp	/^		void trinkNaechsteVolleFlasche(double menge){$/;"	f	class:Sixpack	access:public	signature:(double menge)
v	Hyarmendacil.cpp	/^		enum { v = 1 };$/;"	e	enum:Potenz::__anon3	file:
v	Hyarmendacil.cpp	/^		enum { v = Potenz<b, n-1>::v * b };$/;"	e	enum:Potenz::__anon1	file:
v	Hyarmendacil.cpp	/^		enum { v = b };$/;"	e	enum:Potenz::__anon2	file:
v	Hyarmendacil.cpp	/^	cout << Potenz<1,200>::v;$/;"	m	class:Potenz	file:
value_type	Hador.cpp	/^		typedef T value_type;$/;"	t	class:Punkt	file:	access:private
value_type	Haleth.cpp	/^		typedef T value_type;$/;"	t	class:Sixpack	file:	access:private
value_type	Hallas.cpp	/^		typedef T value_type;$/;"	t	class:Bruch	file:	access:private
value_type	Herion.cpp	/^		typedef T value_type;$/;"	t	class:Complex	file:	access:private
x	Hador.cpp	/^		T x;$/;"	m	class:Punkt	file:	access:private
x	Hador.cpp	/^	T x;$/;"	m	struct:Punkte	file:	access:public
x	Herion.cpp	/^		T x;$/;"	m	class:Complex	file:	access:private
y	Hador.cpp	/^		T y;$/;"	m	class:Punkt	file:	access:private
y	Hador.cpp	/^	T y;$/;"	m	struct:Punkte	file:	access:public
y	Herion.cpp	/^		T y;$/;"	m	class:Complex	file:	access:private
zaehler	Hallas.cpp	/^		T zaehler;$/;"	m	class:Bruch	file:	access:private
zaehler	Hallas.cpp	/^	T zaehler;$/;"	m	struct:s_Bruch	file:	access:public
zaehler	Hallas.cpp	/^	int zaehler = this->zaehler;$/;"	l
zutaten	Haleth.cpp	/^		vector<string> zutaten;$/;"	m	class:Bier	file:	access:private
~Bruch	Hallas.cpp	/^		~Bruch(){}$/;"	f	class:Bruch	access:public	signature:()
~Punkt	Hador.cpp	/^		~Punkt(){}$/;"	f	class:Punkt	access:public	signature:()
