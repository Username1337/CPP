- speicher
	- heap
		- fifo
		- wächst von oben
		- wenn mit new Object dann liegt es auf dem heap
		- heap wird nicht automatisch gelöscht
	- stack
		- lifo
		- zur compile zeit größe bekannt
		- wächst von unten
		- locale variablen
		- funktions adresse
		- funktions rücksprung addressen
		- wenn funktion zuende ist, dann werden die localen vars im stack gelöscht
- referenzen (&)
- funktionen
- rücksprung addresse
- & in funktion
- buffer overrun
- was bringen zeiger
- funktionen
- klassen
- structs

- notizen
- funktionspointer
typedef double (*func_t)(double);

double quad(doubble x){
	return x*x;
}
- &func ist genauso wie func
	- beides ist die addresse von der function
- zeiger niemals auf locale vars in variablen
- parameter übergeben
int main(int argc, char* argv[]){
	...
}

int abc(){
	int b;
}

int main(){
	abc();
}
